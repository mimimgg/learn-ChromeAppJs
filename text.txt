JavaScript로 ToDo List 만들기 요구사항

------------------------------------------------

1️⃣ 로그인 기능 요구사항 정리

📌 기본 기능

1. 사용자 이름 입력 및 저장
  - 사용자가 입력한 이름을 localStorage에 저장
  - 새로고침해도 이름이 유지됨

2. 로그인 폼 숨기기
  - 로그인 후 입력 폼이 사라지고 환영 메시지 표시

3. 환영 메시지 출력
  - 저장된 사용자 이름을 불러와 "Hello {username}" 형태로 표시

4. 자동 로그인 기능
  - localStorage에 저장된 이름이 있다면, 자동으로 환영 메시지를 표시

📌 동작 방식

  - 처음 방문한 경우: 로그인 폼이 보이고, 사용자가 이름을 입력하면 localStorage에 저장 후 폼이 사라짐

  - 다시 방문한 경우: localStorage에서 이름을 불러와 자동으로 환영 메시지를 표시

------------------------------------------------

2️⃣ 실시간 시계 기능 요구사항 정리

📌 기본 기능

1. 현재 시간 표시
  - 현재 시간을 hh:mm:ss 형식으로 화면에 표시

2. 1초마다 업데이트
  - setInterval()을 사용하여 매초마다 시간을 갱신

3. 두 자리 숫자 형식 유지
  - padStart(2, "0")를 사용하여 한 자리 숫자일 경우 앞에 0을 추가 (예: 09:05:07)

📌 동작 방식

  - 페이지가 로드되면 현재 시간을 가져와 화면에 표시

  -  setInterval()을 사용하여 1초마다 시간을 갱신하여 실시간 시계처럼 동작

------------------------------------------------

3️⃣ 랜덤 명언 표시 기능 요구사항 정리

📌 기본 기능

1. 명언 데이터 저장
  - JSON 형식의 배열(quotes)에 여러 개의 명언과 저자 정보를 저장

2. 랜덤한 명언 선택
  - Math.random()과 Math.floor()를 이용해 배열에서 무작위로 하나의 명언을 선택

3. 화면에 명언 표시
  - 선택된 명언을 <span> 태그를 이용해 HTML 문서 내에 표시

📌 동작 방식

  - HTML 문서에서 <span> 태그를 찾아 명언과 저자를 표시할 준비

  - quotes 배열에서 무작위로 하나를 선택

  - 선택된 명언을 quote 요소에, 저자를 author 요소에 출력

📌 추가 고려 사항

  - 명언이 한 번 표시된 후 일정 시간 후에 새 명언이 나타나게 할 수도 있음

  - setInterval()을 사용하면 일정 시간마다 명언이 변경될 수 있음

  - localStorage를 활용하면 사용자가 페이지를 새로고침해도 같은 명언을 유지할 수 있음

------------------------------------------------

4️⃣ 투두 리스트 (To-Do List) 요구사항 정리

📌 기본 기능

1. 할 일 추가
  - 사용자가 입력한 할 일을 목록에 추가
  - localStorage에 저장하여 새로고침해도 유지

2. 할 일 삭제
  - ❌ 버튼을 누르면 해당 항목을 삭제
  - localStorage에서도 해당 항목을 제거

3. 저장 기능
  - localStorage를 활용해 할 일 목록을 유지
  - JSON.stringify()와 JSON.parse()를 이용해 데이터 변환

📌 동작 방식
1. 사용자가 할 일을 입력 후 Enter 또는 Submit 버튼을 누르면:
  - 새 객체 { text: 할 일 내용, id: 고유한 숫자 } 생성
  - 배열(toDos)에 추가 후 localStorage에 저장
  - paintToDo()를 호출해 화면에 표시

2. 할 일 삭제 버튼(❌)을 클릭하면
  - 해당 <li> 요소 삭제
  - toDos.filter()를 사용하여 id가 다른 항목만 남김
  - saveToDos()를 호출하여 localStorage 업데이트

📌 추가 고려 사항
  - filter() 함수는 배열을 반복하면서 특정 조건을 만족하는 요소만 남기는 역할
  - toDos.filter()를 활용하여 삭제 기능 구현
  - Date.now()를 사용해 각 할 일 항목에 고유한 ID 부여
  - forEach()를 사용해 localStorage에서 불러온 데이터를 화면에 표시

------------------------------------------------

5️⃣ 날씨 정보 앱 요구사항 정리

📌 기본 기능

1. 사용자의 위치 정보를 가져와 현재 날씨를 표시한다.
2. fetch()를 이용해 OpenWeather API에서 데이터를 가져온다.
3. 날씨와 도시 정보를 웹 페이지에 표시한다.

📌 세부 동작 방식

1. 위치 정보 가져오기
  - navigator.geolocation.getCurrentPosition() 사용
  - 성공 시 onGeoOk() 함수 실행 → 위도(latitude), 경도(longitude) 값 가져옴
  - 실패 시 onGeoError() 함수 실행 → 경고 메시지 출력

2. 날씨 API 호출
  - fetch(url)을 이용해 OpenWeather API에 요청 보냄
  - 응답 데이터를 JSON 형태로 변환 후 사용
  - 날씨 정보(data.weather[0].main), 온도(data.main.temp), 도시(data.name) 표시

📌 화면 표시 방식 개선

weather.innerText = ${data.weather[0].main} / ${data.main.temp}°C;
→ 온도 단위를 추가해 가독성 향상
